{"version":3,"sources":["panels/style.module.css","App.js","panels/ContentPanel.js","panels/ButtonTemplate.js","panels/MenuButton.js","utils/utils.js","utils/thymeleaf-utils.js","panels/RedirectButton.js","panels/utils.js","panels/Message.js","index.js","panels/TemporaryAccessProvided.js","panels/ErrorMessage.js","img/thumbup.png","img/sad.png"],"names":["module","exports","App","panel","activePanel","props","id","ContentPanel","headerText","content","ButtonTemplate","text","onClick","size","level","className","styles","button","MenuButton","wrapper","exists","obj","undefined","ThymeleafParamName","getThymeleafParam","paramName","getThymeleafParamWithDefault","defaultValue","str","el","$","getThymeleafParamBool","RedirectButton","href","openInNewTab","buttonLink","target","createRedirectButton","urlThParamName","buttonTextThParamName","url","buttonText","isMobile","Message","marginTopPc","marginTopMobile","textHeader","emoticon","buttons","marginTop","style","textContainer","src","alt","map","TemporaryAccessProvided","thumbupImg","ErrorMessage","sadImg","connect","send","alert","contentPanel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.555bc4fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textHeader\":\"style_textHeader__1kvhw\",\"emoticon\":\"style_emoticon__2rlby\",\"textContainer\":\"style_textContainer__3vXEn\",\"text\":\"style_text__1F2EP\",\"link\":\"style_link__1iMrX\",\"button\":\"style_button__1gPxd\",\"wrapper\":\"style_wrapper__2cWjy\",\"buttonLink\":\"style_buttonLink__18msL\"};","import React from 'react';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nconst App = ({ panel }) => {\n\treturn (\n\t\t<View activePanel={panel.props.id} >\n\t\t\t{panel}\n\t\t</View>\n\t);\n}\n\nexport default App;","import React from 'react';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\n\nconst ContentPanel = ({ id, headerText, content }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader>\n\t\t\t{headerText}\n\t\t</PanelHeader>\n\t\t{content}\n\t</Panel>\n);\n\nexport default ContentPanel;\n","import React from 'react';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\n\nimport styles from './style.module.css';\n\nconst ButtonTemplate = ({ text, onClick }) => (\n\t<Button size=\"l\" level=\"secondary\" className={styles.button} {...(onClick && { onClick: onClick })}>{text}</Button>\n);\n\nexport default ButtonTemplate;","import React from 'react';\nimport ButtonTemplate from './ButtonTemplate';\n\nimport styles from './style.module.css';\n\nconst MenuButton = ({ text, onClick }) => (\n\t<div className={styles.wrapper}>\n\t\t<ButtonTemplate text={text} onClick={onClick} />\n\t</div>\n);\n\nexport default MenuButton;","export const ThymeleafParamNames = {\n\tIS_REGISTERED: 'is-registered',\n\tIS_MOBILE: 'is-mobile',\n\tERROR_HEADER: 'error-header',\n\tERROR_TEXT: 'error-text',\n\tDIALOG_URL: 'dialog-url',\n\tGROUP_URL: 'group-url',\n\tDIALOG_REDIRECT_BUTTON_TEXT: 'dialog-redirect-button-text',\n\tGROUP_REDIRECT_BUTTON_TEXT: 'group-redirect-button-text'\n};\n\nexport function exists(obj) {\n\treturn obj !== undefined && obj !== null;\n}\n\nexport function strIsBlank(str) {\n\treturn !exists(str) || str === '';\n}","import $ from 'jquery';\nimport { strIsBlank } from './utils';\n\nexport const ThymeleafParamName = {\n\tERROR: 'error',\n\tIS_REGISTERED: 'is-registered',\n\tIS_MOBILE: 'is-mobile',\n\tERROR_HEADER: 'error-header',\n\tERROR_TEXT: 'error-text',\n\tDIALOG_URL: 'dialog-url',\n\tGROUP_URL: 'group-url',\n\tDIALOG_REDIRECT_BUTTON_TEXT: 'dialog-redirect-button-text',\n\tGROUP_REDIRECT_BUTTON_TEXT: 'group-redirect-button-text',\n\tTMP_ACCESS_PROVIDED_HEADER: 'tmp-access-provided-header',\n\tTMP_ACCESS_PROVIDED_TEXT: 'tmp-access-provided-text',\n\tPERMANENT_ACCESS_BUTTON_TEXT: 'permanent-access-button-text'\n};\n\nexport function getThymeleafParam(paramName) {\n\treturn getThymeleafParamWithDefault(paramName, null);\n}\n\nexport function getThymeleafParamWithDefault(paramName, defaultValue) {\n\tconst el = $('#th-' + paramName);\n\tif (!el || strIsBlank(el.text())) {\n\t\treturn defaultValue;\n\t}\n\treturn el.text();\n}\n\nexport function getThymeleafParamBool(paramName) {\n\tconst strRes = getThymeleafParamWithDefault(paramName, 'false');\n\tif (strRes === 'true') {\n\t\treturn true;\n\t}\n\treturn false;\n}","import React from 'react';\nimport ButtonTemplate from './ButtonTemplate';\nimport styles from './style.module.css';\n\nconst RedirectButton = ({ text, href, openInNewTab }) => (\n\t<a className={`${styles.wrapper} ${styles.buttonLink}`} href={href} {...(openInNewTab && { target: \"_blank\" })}>\n\t\t<ButtonTemplate text={text} />\n\t</a>\n);\n\nexport default RedirectButton;","import React from 'react';\nimport { exists } from '../utils/utils';\nimport { ThymeleafParamName, getThymeleafParam, getThymeleafParamBool } from '../utils/thymeleaf-utils';\nimport RedirectButton from './RedirectButton';\n\nexport function createRedirectButton() {\n\tconst isRegisteredThParamName = ThymeleafParamName.IS_REGISTERED;\n\tconst isRegistered = getThymeleafParamBool(isRegisteredThParamName);\n\tlet urlThParamName;\n\tlet buttonTextThParamName;\n\tif (isRegistered) {\n\t\turlThParamName = ThymeleafParamName.DIALOG_URL;\n\t\tbuttonTextThParamName = ThymeleafParamName.DIALOG_REDIRECT_BUTTON_TEXT;\n\t} else {\n\t\turlThParamName = ThymeleafParamName.GROUP_URL;\n\t\tbuttonTextThParamName = ThymeleafParamName.GROUP_REDIRECT_BUTTON_TEXT;\n\t}\n\n\tconst url = getThymeleafParam(urlThParamName);\n\tconst buttonText = getThymeleafParam(buttonTextThParamName);\n\tif (!exists(url) || !exists(buttonText)) {\n\t\treturn null;\n\t}\n\n\tconst isMobileThParamName = ThymeleafParamName.IS_MOBILE;\n\tconst isMobile = getThymeleafParamBool(isMobileThParamName);\n\treturn (\n\t\t<RedirectButton text={buttonText} href={url} openInNewTab={!isMobile} />\n\t);\n}","import React from 'react';\n\nimport styles from './style.module.css';\nimport { getThymeleafParamBool, ThymeleafParamName } from '../utils/thymeleaf-utils';\nimport { exists } from '../utils/utils';\n\nconst Message = ({ marginTopPc, marginTopMobile, textHeader, emoticon, text, buttons }) => {\n\tconst isMobileThParamName = ThymeleafParamName.IS_MOBILE;\n\tconst isMobile = getThymeleafParamBool(isMobileThParamName);\n\tconst marginTop = isMobile === true ? marginTopMobile : marginTopPc;\n\treturn (\n\t\t<div style={{ marginTop: (marginTop) }}>\n\t\t\t<div className={styles.textContainer}>\n\t\t\t\t<div className={styles.textHeader}>{textHeader}</div>\n\t\t\t\t<img className={styles.emoticon} src={emoticon} alt=\"\" />\n\t\t\t\t<p className={styles.text}>{text}</p>\n\t\t\t</div>\n\t\t\t{\n\t\t\t\tbuttons.map((button) => {\n\t\t\t\t\tif (!exists(button)) {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t\treturn (button);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nexport default Message;","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\nimport ContentPanel from './panels/ContentPanel';\nimport TemporaryAccessProvided from './panels/TemporaryAccessProvided';\nimport ErrorMessage from './panels/ErrorMessage';\nimport { ThymeleafParamName, getThymeleafParamBool } from './utils/thymeleaf-utils';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send(\"VKWebAppInit\", {});\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\n// TODO обработка th-error\n\n// connect.send(\"VKWebAppGetAuthToken\", {\"app_id\": 7294962, \"scope\": \"friends\"});\n\nlet content;\nif (getThymeleafParamBool(ThymeleafParamName.ERROR)) {\n\tcontent = <ErrorMessage />;\n} else {\n\tcontent = <TemporaryAccessProvided />\n}\n\nalert('hello');\n\nconst contentPanel = <ContentPanel id='message' headerText='Доступ' content={content} />\n\nReactDOM.render(<App panel={contentPanel} />, document.getElementById('root'));","import React from 'react';\n\nimport thumbupImg from '../img/thumbup.png';\nimport MenuButton from './MenuButton';\nimport { createRedirectButton } from './utils';\nimport Message from './Message';\nimport { ThymeleafParamName, getThymeleafParam } from '../utils/thymeleaf-utils';\n\nconst TemporaryAccessProvided = () => {\n\tconst textHeader = getThymeleafParam(ThymeleafParamName.TMP_ACCESS_PROVIDED_HEADER);\n\tconst text = getThymeleafParam(ThymeleafParamName.TMP_ACCESS_PROVIDED_TEXT);\n\tconst buttonText=getThymeleafParam(ThymeleafParamName.PERMANENT_ACCESS_BUTTON_TEXT);\n\tconst permanentAccessButton = <MenuButton text={buttonText} onClick={undefined} />\n\tconst redirectButton = createRedirectButton();\n\tconst buttons = [permanentAccessButton, redirectButton];\n\treturn (<Message marginTopPc='10%' marginTopMobile='20%' textHeader={textHeader} emoticon={thumbupImg} text={text} buttons={buttons} />);\n};\n\nexport default TemporaryAccessProvided;","import React from 'react';\nimport { ThymeleafParamName, getThymeleafParamWithDefault } from '../utils/thymeleaf-utils';\nimport { createRedirectButton } from './utils';\nimport Message from './Message';\nimport sadImg from '../img/sad.png';\n\nconst ErrorMessage = () => {\n\tconst errorHeaderThParamName = ThymeleafParamName.ERROR_HEADER;\n\tconst textHeader = getThymeleafParamWithDefault(errorHeaderThParamName, 'Извините, что-то пошло не так');\n\tconst errorTextThParamName = ThymeleafParamName.ERROR_TEXT;\n\tconst text = getThymeleafParamWithDefault(errorTextThParamName, 'Скоро всё исправим');\n\tconst buttons = [createRedirectButton()];\n\treturn (<Message marginTopPc='15%' marginTopMobile='20%' textHeader={textHeader} emoticon={sadImg} text={text} buttons={buttons} />);\n};\n\nexport default ErrorMessage;","module.exports = __webpack_public_path__ + \"static/media/thumbup.c8b601ab.png\";","module.exports = __webpack_public_path__ + \"static/media/sad.bdea5aa6.png\";"],"sourceRoot":""}